// <auto-generated />
using Alura.Filmes.App.Dados;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Alura.Filmes.App.Migrations
{
    [DbContext(typeof(AluraFilmesContexto))]
    partial class AluraFilmesContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("T500_IDFORNECEDOR");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("T500_DTCADASTRO")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("T500_CANOME")
                        .HasColumnType("VARCHAR(60)");

                    b.Property<int>("UsuarioId")
                        .HasColumnName("T001_IDUSUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("F500_FORNECEDOR");
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("T145_IDHISTORICO");

                    b.Property<string>("DebCre")
                        .IsRequired()
                        .HasColumnName("T145_CADEBCRE")
                        .HasColumnType("VARCHAR(01)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("T145_CANOME")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("Sucinto")
                        .HasColumnName("T145_CASUCINTO")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("UsuarioId")
                        .HasColumnName("T001_IDUSUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("T145_HISTORICO");
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("T157_IDTIPDOC");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("T157_CANOME")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("Sigla")
                        .HasColumnName("T157_CASIGLA")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<int>("UsuarioId")
                        .HasColumnName("T001_IDUSUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("T157_TIPO_DOCUMENTO");
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Titulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("T510_IDTITULO");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnName("T510_DTEMISSAO")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnName("T510_DTVENCTO")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<int>("FornecedorId")
                        .HasColumnName("T500_IDFORNECEDOR");

                    b.Property<string>("Letra")
                        .HasColumnName("T510_CALETRA")
                        .HasColumnType("VARCHAR(01)");

                    b.Property<string>("Numero")
                        .HasColumnName("T510_CANUMERO")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnName("T157_IDTIPDOC");

                    b.Property<int>("UsuarioId")
                        .HasColumnName("T001_IDUSUARIO");

                    b.Property<float>("VlrNominal")
                        .HasColumnName("T510_VLNOMINAL")
                        .HasColumnType("NUMERIC(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("T510_TITULO");
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("T001_IDUSUARIO");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("T001_CACPF")
                        .HasColumnType("VARCHAR(11)");

                    b.Property<string>("Email")
                        .HasColumnName("T001_CAEMAIL")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("T001_CANOME")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("T001_CASENHA")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("T001_DTSENHA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("T001_USUARIO");
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Fornecedor", b =>
                {
                    b.HasOne("Alura.Filmes.App.Negocio.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Historico", b =>
                {
                    b.HasOne("Alura.Filmes.App.Negocio.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.TipoDocumento", b =>
                {
                    b.HasOne("Alura.Filmes.App.Negocio.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alura.Filmes.App.Negocio.Titulo", b =>
                {
                    b.HasOne("Alura.Filmes.App.Negocio.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alura.Filmes.App.Negocio.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alura.Filmes.App.Negocio.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
